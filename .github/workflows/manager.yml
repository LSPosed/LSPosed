name: Manager

on:
  push:
    branches: [ master ]
    paths:
    - 'app/**'
    - '.github/workflows/manager.yml'
    - 'gradle.properties'
  pull_request:
    paths:
    - 'app/**'
    - '.github/workflows/manager.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Write key
        run: |
          echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
          echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
          echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
          echo androidStoreFile='key.jks' >> gradle.properties
          echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
      - name: Build with Gradle
        id: buildRelease
        run: |
          ./gradlew :app:assembleRelease
          echo "::set-output name=releaseName::`ls app/build/outputs/apk/release/LSPosed*-v*-release.apk | awk -F '(/|.apk)' '{print $6}'`"
      - name: Upload apk
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.buildRelease.outputs.releaseName }}
          path: "app/build/outputs/apk/release/*.apk"
      - name: Upload mappings
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.buildRelease.outputs.releaseName }}-mappings
          path: "app/build/outputs"
      - name: Post to channel
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          FILE: "app/build/outputs/apk/release/${{ steps.buildRelease.outputs.releaseName }}.apk"
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$FILE"
